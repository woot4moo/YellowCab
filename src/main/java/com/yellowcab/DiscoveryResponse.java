/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yellowcab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *   If the Discovery Daemon detects an error that prevents processing of the message then it MUST respond with an
 *   appropriate Status Message indicating that the exchange failed. Otherwise, the Discovery Daemon
 *   passes the relevant information to its TAXII Back-end. The TAXII Back-end uses this information, along
 *   with its own access control policy, to create a list of TAXII Services to be returned or determine that the
 *   request will not be fulfilled. (E.g., the request might be denied due to a lack of authorization on the part
 *   of the requester.) If the request is honored, a list of TAXII Services is packaged into a Discovery Response
 *   which is sent back to the TAXII Client. (Not that this list might be 0-length if there are no services the
 *   requester is permitted to see.) The TAXII Client receives this message and passes the information to its
 *   own TAXII Back-end for processing. If the Discovery Daemon does not respond with a Discovery
 *   Response for any reason, the Discovery Daemon MUST respond with a Status Message indicating the
 *   reason that prevented it from returning a successful response. A TAXII Status Message MUST only be
 *   returned to indicate an error occurred or that the request was denied
 * *
 */
public class DiscoveryResponse implements org.apache.thrift.TBase<DiscoveryResponse, DiscoveryResponse._Fields>, java.io.Serializable, Cloneable, Comparable<DiscoveryResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DiscoveryResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALLOWED_SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedServices", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DiscoveryResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DiscoveryResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see MessageStatusType
   */
  public MessageStatusType status; // optional
  public List<ServiceInstance> allowedServices; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MessageStatusType
     */
    STATUS((short)1, "status"),
    ALLOWED_SERVICES((short)2, "allowedServices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // ALLOWED_SERVICES
          return ALLOWED_SERVICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.STATUS,_Fields.ALLOWED_SERVICES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageStatusType.class)));
    tmpMap.put(_Fields.ALLOWED_SERVICES, new org.apache.thrift.meta_data.FieldMetaData("allowedServices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceInstance.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DiscoveryResponse.class, metaDataMap);
  }

  public DiscoveryResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DiscoveryResponse(DiscoveryResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetAllowedServices()) {
      List<ServiceInstance> __this__allowedServices = new ArrayList<ServiceInstance>(other.allowedServices.size());
      for (ServiceInstance other_element : other.allowedServices) {
        __this__allowedServices.add(new ServiceInstance(other_element));
      }
      this.allowedServices = __this__allowedServices;
    }
  }

  public DiscoveryResponse deepCopy() {
    return new DiscoveryResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.allowedServices = null;
  }

  /**
   * 
   * @see MessageStatusType
   */
  public MessageStatusType getStatus() {
    return this.status;
  }

  /**
   * 
   * @see MessageStatusType
   */
  public DiscoveryResponse setStatus(MessageStatusType status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getAllowedServicesSize() {
    return (this.allowedServices == null) ? 0 : this.allowedServices.size();
  }

  public java.util.Iterator<ServiceInstance> getAllowedServicesIterator() {
    return (this.allowedServices == null) ? null : this.allowedServices.iterator();
  }

  public void addToAllowedServices(ServiceInstance elem) {
    if (this.allowedServices == null) {
      this.allowedServices = new ArrayList<ServiceInstance>();
    }
    this.allowedServices.add(elem);
  }

  public List<ServiceInstance> getAllowedServices() {
    return this.allowedServices;
  }

  public DiscoveryResponse setAllowedServices(List<ServiceInstance> allowedServices) {
    this.allowedServices = allowedServices;
    return this;
  }

  public void unsetAllowedServices() {
    this.allowedServices = null;
  }

  /** Returns true if field allowedServices is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedServices() {
    return this.allowedServices != null;
  }

  public void setAllowedServicesIsSet(boolean value) {
    if (!value) {
      this.allowedServices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((MessageStatusType)value);
      }
      break;

    case ALLOWED_SERVICES:
      if (value == null) {
        unsetAllowedServices();
      } else {
        setAllowedServices((List<ServiceInstance>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case ALLOWED_SERVICES:
      return getAllowedServices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case ALLOWED_SERVICES:
      return isSetAllowedServices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DiscoveryResponse)
      return this.equals((DiscoveryResponse)that);
    return false;
  }

  public boolean equals(DiscoveryResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_allowedServices = true && this.isSetAllowedServices();
    boolean that_present_allowedServices = true && that.isSetAllowedServices();
    if (this_present_allowedServices || that_present_allowedServices) {
      if (!(this_present_allowedServices && that_present_allowedServices))
        return false;
      if (!this.allowedServices.equals(that.allowedServices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DiscoveryResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedServices()).compareTo(other.isSetAllowedServices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedServices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedServices, other.allowedServices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DiscoveryResponse(");
    boolean first = true;

    if (isSetStatus()) {
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetAllowedServices()) {
      if (!first) sb.append(", ");
      sb.append("allowedServices:");
      if (this.allowedServices == null) {
        sb.append("null");
      } else {
        sb.append(this.allowedServices);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DiscoveryResponseStandardSchemeFactory implements SchemeFactory {
    public DiscoveryResponseStandardScheme getScheme() {
      return new DiscoveryResponseStandardScheme();
    }
  }

  private static class DiscoveryResponseStandardScheme extends StandardScheme<DiscoveryResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DiscoveryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = MessageStatusType.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALLOWED_SERVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.allowedServices = new ArrayList<ServiceInstance>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  ServiceInstance _elem42;
                  _elem42 = new ServiceInstance();
                  _elem42.read(iprot);
                  struct.allowedServices.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setAllowedServicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DiscoveryResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.allowedServices != null) {
        if (struct.isSetAllowedServices()) {
          oprot.writeFieldBegin(ALLOWED_SERVICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allowedServices.size()));
            for (ServiceInstance _iter43 : struct.allowedServices)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DiscoveryResponseTupleSchemeFactory implements SchemeFactory {
    public DiscoveryResponseTupleScheme getScheme() {
      return new DiscoveryResponseTupleScheme();
    }
  }

  private static class DiscoveryResponseTupleScheme extends TupleScheme<DiscoveryResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DiscoveryResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetAllowedServices()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetAllowedServices()) {
        {
          oprot.writeI32(struct.allowedServices.size());
          for (ServiceInstance _iter44 : struct.allowedServices)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DiscoveryResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.status = MessageStatusType.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.allowedServices = new ArrayList<ServiceInstance>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            ServiceInstance _elem47;
            _elem47 = new ServiceInstance();
            _elem47.read(iprot);
            struct.allowedServices.add(_elem47);
          }
        }
        struct.setAllowedServicesIsSet(true);
      }
    }
  }

}

